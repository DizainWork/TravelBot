import telebot
from telebot import types
import os
from dotenv import load_dotenv
from datetime import datetime
import json
from currency_api import get_currency_rates, update_currency_rate, get_stored_rates
from database import Database
from excel_manager import ExcelManager

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

print(f"BOT_TOKEN: {BOT_TOKEN}")
print(f"ADMIN_CHAT_ID: {ADMIN_CHAT_ID}")

bot = telebot.TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Excel
excel_mgr = ExcelManager(db)

def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        '‚úàÔ∏è –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã', 'üèù –¢—É—Ä—ã',
        'üè† –û—Ç–µ–ª–∏', 'üöó –ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ',
        'üåç –í–∏–∑—ã', 'üõ° –°—Ç—Ä–∞—Ö–æ–≤–∫–∞',
        'üé´ –≠–∫—Å–∫—É—Ä—Å–∏–∏', 'üõÑ –ö–æ–Ω—Å—å–µ—Ä–∂-—Å–µ—Ä–≤–∏—Å',
        'üí≥ –ë–æ–Ω—É—Å—ã –∏ –∞–∫—Ü–∏–∏', 'üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç',
        'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≥–µ–Ω—Ç–æ–º'
    ]
    markup.add(*[types.KeyboardButton(button) for button in buttons])
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Travel in New Life!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä—ã, –±–∏–ª–µ—Ç—ã –∏ –æ—Ç–µ–ª–∏, "
        "–∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö."
    )
    bot.send_message(message.chat.id, welcome_text, reply_markup=create_main_menu())

@bot.message_handler(func=lambda message: message.text == 'üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç')
def currency_exchange(message):
    markup = types.InlineKeyboardMarkup(row_width=3)
    currencies = ['USD', 'EUR', 'GBP', 'TRY']
    buttons = [types.InlineKeyboardButton(curr, callback_data=f'currency_{curr}') for curr in currencies]
    markup.add(*buttons)
    markup.add(types.InlineKeyboardButton('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main'))
    
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –≤–∞–ª—é—Ç—É:",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('currency_'))
def handle_currency(call):
    currency = call.data.split('_')[1]
    rates = get_stored_rates()
    
    if currency in rates:
        rate_info = rates[currency]
        response = (
            f"–ö—É—Ä—Å {currency} –Ω–∞ {rate_info['date']}:\n"
            f"1 {currency} = {rate_info['rate']} RUB\n\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {rate_info['updated_at']}"
        )
    else:
        response = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫—É—Ä—Å –¥–ª—è {currency} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data=f'update_{currency}'))
    markup.add(types.InlineKeyboardButton('üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', callback_data=f'subscribe_{currency}'))
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≤–∞–ª—é—Ç', callback_data='back_to_currencies'))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=response,
        reply_markup=markup
    )

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['update_currency'])
def update_currency(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        return
    
    try:
        _, currency, rate = message.text.split()
        rate = float(rate)
        update_currency_rate(currency, rate)
        bot.reply_to(message, f"–ö—É—Ä—Å {currency} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /update_currency USD 92.5")

@bot.message_handler(commands=['show_currency'])
def show_currency(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        return
    
    rates = get_stored_rates()
    response = "–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n\n"
    for currency, info in rates.items():
        response += f"{currency}: {info['rate']} RUB (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {info['updated_at']})\n"
    
    bot.reply_to(message, response)

@bot.message_handler(func=lambda message: message.text == '‚úàÔ∏è –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã')
def flights_menu(message):
    flights = db.get_flights()
    if not flights:
        bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–π—Å–æ–≤")
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    for flight in flights:
        button_text = f"{flight[1]} ‚û°Ô∏è {flight[2]} ({flight[3]}) - {flight[4]}‚ÇΩ"
        markup.add(types.InlineKeyboardButton(
            button_text, 
            callback_data=f'flight_{flight[0]}'
        ))
    markup.add(types.InlineKeyboardButton('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main'))
    
    bot.send_message(
        message.chat.id,
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–π—Å—ã:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == 'üèù –¢—É—Ä—ã')
def tours_menu(message):
    tours = db.get_tours()
    if not tours:
        bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–æ–≤")
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    for tour in tours:
        button_text = f"{tour[1]} - {tour[2]} ({tour[3]} –¥–Ω–µ–π) - {tour[4]}‚ÇΩ"
        markup.add(types.InlineKeyboardButton(
            button_text, 
            callback_data=f'tour_{tour[0]}'
        ))
    markup.add(types.InlineKeyboardButton('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main'))
    
    bot.send_message(
        message.chat.id,
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä—ã:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == 'üè† –û—Ç–µ–ª–∏')
def hotels_menu(message):
    hotels = db.get_hotels()
    if not hotels:
        bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–µ–ª–µ–π")
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    for hotel in hotels:
        button_text = f"{hotel[1]} ({hotel[2]}) - {hotel[3]}‚≠ê - {hotel[4]}‚ÇΩ/–Ω–æ—á—å"
        markup.add(types.InlineKeyboardButton(
            button_text, 
            callback_data=f'hotel_{hotel[0]}'
        ))
    markup.add(types.InlineKeyboardButton('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main'))
    
    bot.send_message(
        message.chat.id,
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–µ–ª–∏:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == 'üåç –í–∏–∑—ã')
def visas_menu(message):
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –≤–∏–∑
    custom_text = db.get_text_block('üåç –í–∏–∑—ã')
    if custom_text:
        bot.send_message(message.chat.id, custom_text, parse_mode='HTML')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–∑
    visas = db.get_visas()
    if not visas:
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    for visa in visas:
        button_text = f"{visa[1]} - {visa[2]} ({visa[3]} –¥–Ω–µ–π) - {visa[4]}‚ÇΩ"
        markup.add(types.InlineKeyboardButton(
            button_text, 
            callback_data=f'visa_{visa[0]}'
        ))
    markup.add(types.InlineKeyboardButton('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main'))
    
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∑—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == 'üé´ –≠–∫—Å–∫—É—Ä—Å–∏–∏')
def excursions_menu(message):
    excursions = db.get_excursions()
    if not excursions:
        bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π")
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    for excursion in excursions:
        button_text = f"{excursion[1]} ({excursion[2]}) - {excursion[3]}—á - {excursion[4]}‚ÇΩ"
        markup.add(types.InlineKeyboardButton(
            button_text, 
            callback_data=f'excursion_{excursion[0]}'
        ))
    markup.add(types.InlineKeyboardButton('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main'))
    
    bot.send_message(
        message.chat.id,
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏:",
        reply_markup=markup
    )

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
@bot.message_handler(commands=['add_flight'])
def add_flight(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        return
    
    try:
        # –§–æ—Ä–º–∞—Ç: /add_flight –ú–æ—Å–∫–≤–∞ –ü–∞—Ä–∏–∂ 2024-03-20 50000 100
        _, from_city, to_city, date, price, seats = message.text.split()
        flight_id = db.add_flight(from_city, to_city, date, float(price), int(seats))
        bot.reply_to(message, f"–†–µ–π—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω (ID: {flight_id})")
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_flight –ú–æ—Å–∫–≤–∞ –ü–∞—Ä–∏–∂ 2024-03-20 50000 100")

@bot.message_handler(commands=['add_tour'])
def add_tour(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        return
    
    try:
        # –§–æ—Ä–º–∞—Ç: /add_tour "–¢—É—Ä –≤ –ü–∞—Ä–∏–∂" –ü–∞—Ä–∏–∂ 7 100000 "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–∞" 20
        cmd_parts = message.text.split('"')
        name = cmd_parts[1]
        rest_parts = cmd_parts[2].strip().split()
        destination, duration, price, places = rest_parts[0], rest_parts[1], rest_parts[2], rest_parts[-1]
        description = " ".join(rest_parts[3:-1]) if len(rest_parts) > 4 else ""
        
        tour_id = db.add_tour(name, destination, int(duration), float(price), description, int(places))
        bot.reply_to(message, f"–¢—É—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω (ID: {tour_id})")
    except (ValueError, IndexError):
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_tour "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–∞" –ú–µ—Å—Ç–æ 7 100000 "–û–ø–∏—Å–∞–Ω–∏–µ" 20')

@bot.callback_query_handler(func=lambda call: call.data.startswith(('flight_', 'tour_', 'hotel_', 'visa_', 'excursion_')))
def handle_service_selection(call):
    service_type, service_id = call.data.split('_')
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=f'book_{service_type}_{service_id}'))
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'back_to_{service_type}s'))
    
    if service_type == 'flight':
        flight = db.get_flights()[int(service_id)-1]
        text = f"–†–µ–π—Å: {flight[1]} ‚û°Ô∏è {flight[2]}\n–î–∞—Ç–∞: {flight[3]}\n–¶–µ–Ω–∞: {flight[4]}‚ÇΩ\n–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {flight[5]}"
    elif service_type == 'tour':
        tour = db.get_tours()[int(service_id)-1]
        text = f"–¢—É—Ä: {tour[1]}\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {tour[2]}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tour[3]} –¥–Ω–µ–π\n–¶–µ–Ω–∞: {tour[4]}‚ÇΩ\n–û–ø–∏—Å–∞–Ω–∏–µ: {tour[5]}"
    elif service_type == 'hotel':
        hotel = db.get_hotels()[int(service_id)-1]
        text = f"–û—Ç–µ–ª—å: {hotel[1]}\n–õ–æ–∫–∞—Ü–∏—è: {hotel[2]}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {hotel[3]}‚≠ê\n–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å: {hotel[4]}‚ÇΩ\n–û–ø–∏—Å–∞–Ω–∏–µ: {hotel[5]}"
    elif service_type == 'visa':
        visa = db.get_visas()[int(service_id)-1]
        text = f"–í–∏–∑–∞: {visa[1]}\n–¢–∏–ø: {visa[2]}\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {visa[3]} –¥–Ω–µ–π\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {visa[4]}‚ÇΩ\n–°—Ä–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: {visa[5]} –¥–Ω–µ–π\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {visa[6]}"
    else:  # excursion
        excursion = db.get_excursions()[int(service_id)-1]
        text = f"–≠–∫—Å–∫—É—Ä—Å–∏—è: {excursion[1]}\n–ú–µ—Å—Ç–æ: {excursion[2]}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {excursion[3]} —á–∞—Å–æ–≤\n–¶–µ–Ω–∞: {excursion[4]}‚ÇΩ\n–û–ø–∏—Å–∞–Ω–∏–µ: {excursion[5]}"
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('book_'))
def handle_booking(call):
    _, service_type, service_id = call.data.split('_')
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    request_id = db.create_request(
        call.message.chat.id,
        call.message.chat.first_name,
        service_type,
        service_id,
        ""  # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_text = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}!\n–£—Å–ª—É–≥–∞: {service_type}\nID —É—Å–ª—É–≥–∏: {service_id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {call.message.chat.first_name}"
    bot.send_message(ADMIN_CHAT_ID, admin_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_text = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=user_text
    )

@bot.message_handler(commands=['export_excel'])
def export_to_excel(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        return
    
    try:
        file_path = excel_mgr.create_excel()
        with open(file_path, 'rb') as file:
            bot.send_document(message.chat.id, file)
        bot.reply_to(message, "Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")

@bot.message_handler(commands=['import_excel'])
def import_from_excel(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        return
    
    bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    bot.register_next_step_handler(message, process_excel_file)

def process_excel_file(message):
    if not message.document:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª")
        return
    
    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        with open('travel_data.xlsx', 'wb') as new_file:
            new_file.write(downloaded_file)
        
        success, msg = excel_mgr.update_from_excel()
        bot.reply_to(message, msg)
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_main')
def handle_back_to_main(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    welcome_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:"
    bot.send_message(call.message.chat.id, welcome_text, reply_markup=create_main_menu())

@bot.message_handler(commands=['edit_text'])
def edit_text_command(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    sections = [
        '‚úàÔ∏è –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã', 'üèù –¢—É—Ä—ã',
        'üè† –û—Ç–µ–ª–∏', 'üöó –ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ',
        'üåç –í–∏–∑—ã', 'üõ° –°—Ç—Ä–∞—Ö–æ–≤–∫–∞',
        'üé´ –≠–∫—Å–∫—É—Ä—Å–∏–∏', 'üõÑ –ö–æ–Ω—Å—å–µ—Ä–∂-—Å–µ—Ä–≤–∏—Å',
        'üí≥ –ë–æ–Ω—É—Å—ã –∏ –∞–∫—Ü–∏–∏', 'üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç'
    ]
    markup.add(*[types.KeyboardButton(section) for section in sections])
    markup.add(types.KeyboardButton('üîô –û—Ç–º–µ–Ω–∞'))
    
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_section_selection)

def process_section_selection(message):
    if message.text == 'üîô –û—Ç–º–µ–Ω–∞':
        bot.reply_to(message, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_menu())
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    if message.text.startswith('/'):
        return
    
    current_text = db.get_text_block(message.text) or "–¢–µ–∫—Å—Ç –Ω–µ –∑–∞–¥–∞–Ω"
    bot.reply_to(message, 
                 f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{message.text}':\n\n{current_text}\n\n"
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:",
                 reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, save_section_text, section=message.text)

def save_section_text(message, section):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    if message.text.startswith('/'):
        bot.reply_to(message, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /edit_text –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                    reply_markup=create_main_menu())
        return
        
    db.update_text_block(section, message.text)
    bot.reply_to(message, f"‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                 reply_markup=create_main_menu())

@bot.message_handler(commands=['add_visa'])
def add_visa(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        return
    
    try:
        # –§–æ—Ä–º–∞—Ç: /add_visa "–°—Ç—Ä–∞–Ω–∞" "–¢–∏–ø –≤–∏–∑—ã" –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω–∞ —Å—Ä–æ–∫_–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"
        parts = message.text.split('"')
        country = parts[1]
        visa_type = parts[3]
        rest = parts[4].strip().split()
        duration = int(rest[0])
        price = float(rest[1])
        processing_time = int(rest[2])
        requirements = parts[5] if len(parts) > 5 else ""
        
        visa_id = db.add_visa(country, visa_type, duration, price, processing_time, requirements)
        bot.reply_to(message, f"–í–∏–∑–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {visa_id})")
    except (ValueError, IndexError):
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_visa "–í—å–µ—Ç–Ω–∞–º" "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è" 90 40 5 "–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç, —Ñ–æ—Ç–æ"')

@bot.message_handler(commands=['edit_visas'])
def edit_visas_text(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        return
    current_text = db.get_text_block('üåç –í–∏–∑—ã') or "–¢–µ–∫—Å—Ç –Ω–µ –∑–∞–¥–∞–Ω"
    bot.reply_to(message, 
                 f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ –í–∏–∑—ã:\n\n{current_text}\n\n"
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:")
    bot.register_next_step_handler(message, save_section_text, 'üåç –í–∏–∑—ã')

@bot.message_handler(commands=['edit_insurance'])
def edit_insurance_text(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        return
    current_text = db.get_text_block('üõ° –°—Ç—Ä–∞—Ö–æ–≤–∫–∞') or "–¢–µ–∫—Å—Ç –Ω–µ –∑–∞–¥–∞–Ω"
    bot.reply_to(message, 
                 f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ –°—Ç—Ä–∞—Ö–æ–≤–∫–∞:\n\n{current_text}\n\n"
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:")
    bot.register_next_step_handler(message, save_section_text, 'üõ° –°—Ç—Ä–∞—Ö–æ–≤–∫–∞')

@bot.message_handler(commands=['edit_concierge'])
def edit_concierge_text(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        return
    current_text = db.get_text_block('üõÑ –ö–æ–Ω—Å—å–µ—Ä–∂-—Å–µ—Ä–≤–∏—Å') or "–¢–µ–∫—Å—Ç –Ω–µ –∑–∞–¥–∞–Ω"
    bot.reply_to(message, 
                 f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ –ö–æ–Ω—Å—å–µ—Ä–∂-—Å–µ—Ä–≤–∏—Å:\n\n{current_text}\n\n"
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:")
    bot.register_next_step_handler(message, save_section_text, 'üõÑ –ö–æ–Ω—Å—å–µ—Ä–∂-—Å–µ—Ä–≤–∏—Å')

@bot.message_handler(commands=['edit_bonuses'])
def edit_bonuses_text(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        return
    current_text = db.get_text_block('üí≥ –ë–æ–Ω—É—Å—ã –∏ –∞–∫—Ü–∏–∏') or "–¢–µ–∫—Å—Ç –Ω–µ –∑–∞–¥–∞–Ω"
    bot.reply_to(message, 
                 f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ –ë–æ–Ω—É—Å—ã –∏ –∞–∫—Ü–∏–∏:\n\n{current_text}\n\n"
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:")
    bot.register_next_step_handler(message, save_section_text, 'üí≥ –ë–æ–Ω—É—Å—ã –∏ –∞–∫—Ü–∏–∏')

@bot.message_handler(commands=['edit_exchange'])
def edit_exchange_text(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        return
    current_text = db.get_text_block('üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç') or "–¢–µ–∫—Å—Ç –Ω–µ –∑–∞–¥–∞–Ω"
    bot.reply_to(message, 
                 f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ –û–±–º–µ–Ω –≤–∞–ª—é—Ç:\n\n{current_text}\n\n"
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:")
    bot.register_next_step_handler(message, save_section_text, 'üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç')

def save_section_text(message, section):
    db.update_text_block(section, message.text)
    bot.reply_to(message, f"‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                 reply_markup=create_main_menu())

@bot.message_handler(func=lambda message: message.text == 'üõ° –°—Ç—Ä–∞—Ö–æ–≤–∫–∞')
def insurance_menu(message):
    custom_text = db.get_text_block('üõ° –°—Ç—Ä–∞—Ö–æ–≤–∫–∞')
    if custom_text:
        bot.send_message(message.chat.id, custom_text, parse_mode='HTML')

@bot.message_handler(func=lambda message: message.text == 'üõÑ –ö–æ–Ω—Å—å–µ—Ä–∂-—Å–µ—Ä–≤–∏—Å')
def concierge_menu(message):
    custom_text = db.get_text_block('üõÑ –ö–æ–Ω—Å—å–µ—Ä–∂-—Å–µ—Ä–≤–∏—Å')
    if custom_text:
        bot.send_message(message.chat.id, custom_text, parse_mode='HTML')

@bot.message_handler(func=lambda message: message.text == 'üí≥ –ë–æ–Ω—É—Å—ã –∏ –∞–∫—Ü–∏–∏')
def bonuses_menu(message):
    custom_text = db.get_text_block('üí≥ –ë–æ–Ω—É—Å—ã –∏ –∞–∫—Ü–∏–∏')
    if custom_text:
        bot.send_message(message.chat.id, custom_text, parse_mode='HTML')

@bot.message_handler(func=lambda message: message.text == 'üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç')
def exchange_menu(message):
    custom_text = db.get_text_block('üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç')
    if custom_text:
        bot.send_message(message.chat.id, custom_text, parse_mode='HTML')

bot.polling(none_stop=True) 